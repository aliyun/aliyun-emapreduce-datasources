/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.spark.sql.aliyun.logservice

import java.io._
import java.nio.charset.StandardCharsets
import java.util.Locale

import org.apache.commons.cli.MissingArgumentException
import org.apache.commons.io.IOUtils
import org.apache.hadoop.fs.Path
import org.apache.spark.internal.Logging
import org.apache.spark.sql.catalyst.InternalRow
import org.apache.spark.sql.catalyst.encoders.{ExpressionEncoder, RowEncoder}
import org.apache.spark.sql.catalyst.expressions.GenericRow
import org.apache.spark.sql.catalyst.util.DateTimeUtils
import org.apache.spark.sql.execution.SQLExecution.EXECUTION_ID_KEY
import org.apache.spark.sql.{DataFrame, Row, SQLContext}
import org.apache.spark.sql.execution.streaming.{HDFSMetadataLog, Offset, SerializedOffset, Source}
import org.apache.spark.sql.types.StructType
import org.apache.spark.storage.StorageLevel

import scala.collection.mutable
import scala.collection.mutable.ArrayBuffer

class LoghubSource(
    @transient sqlContext: SQLContext,
    userSpecifiedSchema: Option[StructType],
    sourceOptions: Map[String, String],
    metadataPath: String,
    startingOffsets: LoghubOffsetRangeLimit,
    @transient loghubOffsetReader: LoghubOffsetReader)
  extends Source with Logging with Serializable {

  private val maxOffsetsPerTrigger =
    sourceOptions.getOrElse("maxOffsetsPerTrigger", 64 * 1024 + "")
  private var currentPartitionOffsets: Option[Map[LoghubShard, String]] = None
  private val zkParams =
    sourceOptions
      .keySet
      .filter(_.toLowerCase(Locale.ROOT).startsWith("zookeeper."))
      .map { k => k.drop(10).toString -> sourceOptions(k) }
      .toMap
  @transient private val zkClient = LoghubOffsetReader.getOrCreateZKClient(zkParams)
  private val batches = new mutable.HashMap[(Option[Offset], Offset), LoghubSourceRDD]()

  private val accessKeyId = sourceOptions.getOrElse("access.key.id",
    throw new MissingArgumentException("Missing access key id (='access.key.id')."))
  private val accessKeySecret = sourceOptions.getOrElse("access.key.secret",
    throw new MissingArgumentException("Missing access key secret (='access.key.secret')."))
  private val endpoint = sourceOptions.getOrElse("endpoint",
    throw new MissingArgumentException("Missing log store endpoint (='endpoint')."))
  private val logProject = sourceOptions.getOrElse("sls.project",
    throw new MissingArgumentException("Missing logService project (='sls.project')."))
  private val logStore = sourceOptions.getOrElse("sls.store",
    throw new MissingArgumentException("Missing logService store (='sls.store')."))

  private lazy val initialPartitionOffsets = {
    val metadataLog =
      new HDFSMetadataLog[LoghubSourceOffset](sqlContext.sparkSession, metadataPath) {
        override def serialize(metadata: LoghubSourceOffset, out: OutputStream): Unit = {
          out.write(0) // A zero byte is written to support Spark 2.1.0 (SPARK-19517)
          val writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8))
          writer.write("v" + LoghubSource.VERSION + "\n")
          writer.write(metadata.json())
          writer.flush()
        }

        override def deserialize(in: InputStream): LoghubSourceOffset = {
          in.read() // A zero byte is read to support Spark 2.1.0 (SPARK-19517)
          val content = IOUtils.toString(new InputStreamReader(in, StandardCharsets.UTF_8))
          // HDFSMetadataLog guarantees that it never creates a partial file.
          assert(content.length != 0)
          if (content(0) == 'v') {
            val indexOfNewLine = content.indexOf("\n")
            if (indexOfNewLine > 0) {
              LoghubSourceOffset(SerializedOffset(content.substring(indexOfNewLine + 1)))
            } else {
              throw new IllegalStateException(
                s"Log file was malformed: failed to detect the log file version line.")
            }
          } else {
            // The log was generated by Spark 2.1.0
            LoghubSourceOffset(SerializedOffset(content))
          }
        }
      }

    metadataLog.get(0).getOrElse {
      val offsets = startingOffsets match {
        case EarliestOffsetRangeLimit => LoghubSourceOffset(loghubOffsetReader.fetchEarliestOffsets())
        case LatestOffsetRangeLimit => LoghubSourceOffset(loghubOffsetReader.fetchLatestOffsets())
        case SpecificOffsetRangeLimit(p) => throw new UnsupportedEncodingException()
      }
      metadataLog.add(0, offsets)
      logInfo(s"Initial offsets: $offsets")
      offsets
    }.shardToOffsets
  }

  override lazy val schema: StructType = Utils.getSchema(userSpecifiedSchema, sourceOptions)

  private val fallback = schema.sameType(LoghubOffsetReader.loghubSchema)

  private val transFunc = (data: LoghubData, encoderForDataColumns: ExpressionEncoder[Row]) => {
    if (fallback) {
      InternalRow(
        data.project,
        data.store,
        data.shardId,
        DateTimeUtils.fromJavaTimestamp(data.dataTime),
        data.getContent)
    } else {
      encoderForDataColumns.toRow(new GenericRow(data.toArray))
    }
  }

  override def getOffset: Option[Offset] = {
    // Make sure initialPartitionOffsets is initialized
    initialPartitionOffsets

    val latest = loghubOffsetReader.fetchLatestOffsets()
    val earliest = loghubOffsetReader.fetchEarliestOffsets()
    val shardOffsets = new ArrayBuffer[(Int, String, String)]()
    if (currentPartitionOffsets.isEmpty) {
      initialPartitionOffsets.foreach(po => {
        shardOffsets.+=((po._1.shard, po._2, latest(po._1)))
      })
      latest.keySet.diff(initialPartitionOffsets.keySet).foreach(po => {
        shardOffsets.+=((po.shard, earliest(po), latest(po)))
      })
    } else {
      currentPartitionOffsets.get.foreach(po => {
        shardOffsets.+=((po._1.shard, po._2, latest(po._1)))
      })
      latest.keySet.diff(currentPartitionOffsets.get.keySet).foreach(po => {
        shardOffsets.+=((po.shard, earliest(po), latest(po)))
      })
    }

    batches.foreach(e => e._2.unpersist(false))
    batches.clear()
    val rdd = new LoghubSourceRDD(sqlContext.sparkContext, logProject, logStore,
      accessKeyId, accessKeySecret, endpoint, shardOffsets, schema.fieldNames, zkParams,
      metadataPath, maxOffsetsPerTrigger.toLong, fallback = fallback)

    sqlContext.sparkContext.setLocalProperty(EXECUTION_ID_KEY, null)
    rdd.persist(StorageLevel.MEMORY_AND_DISK).count()

    val start = LoghubSourceOffset(shardOffsets.map(so => (logProject, logStore, so._1, so._2)).toArray:_*)
    val offsets = shardOffsets.map(so => {
      val nodeParent = new Path(metadataPath).toUri.getPath
      val available: String = zkClient.readData(s"$nodeParent/available/$logProject/$logStore/${so._1}.shard")
      (LoghubShard(logProject, logStore, so._1), available)
    }).toMap
    currentPartitionOffsets = Some(offsets)
    val end = LoghubSourceOffset(offsets)
    batches.put((Some(start), end), rdd)
    Some(end)
  }

  override def getBatch(start: Option[Offset], end: Offset): DataFrame = {
    val initialStart = if (start.isEmpty) {
      Some(LoghubSourceOffset(initialPartitionOffsets))
    } else {
      start
    }

    val rdd = if (batches.contains((initialStart, end))) {
      val expiredBatches = batches.filter(b => !b._1._1.equals(initialStart) || !b._1._2.equals(end))
      expiredBatches.foreach(_._2.unpersist())
      expiredBatches.foreach(b => batches.remove(b._1))
      batches((initialStart, end)).mapPartitions(it => {
        val encoderForDataColumns = RowEncoder(schema).resolveAndBind()
        it.map(t => transFunc(t, encoderForDataColumns))
      })
    } else {
      val fromShardOffsets = start match {
        case Some(prevBatchEndOffset) =>
          LoghubSourceOffset.getShardOffsets(prevBatchEndOffset)
        case None =>
          initialPartitionOffsets
      }
      val shardOffsets = new ArrayBuffer[(Int, String, String)]()
      val untilShardOffsets = LoghubSourceOffset.getShardOffsets(end)
      val shards = untilShardOffsets.keySet.filter { shard =>
        // Ignore partitions that we don't know the from offsets.
        fromShardOffsets.contains(shard)
      }.toSeq
      shards.foreach(shard => {
        shardOffsets.+=((shard.shard, fromShardOffsets(shard), untilShardOffsets(shard)))
      })
      new LoghubSourceRDD(sqlContext.sparkContext, logProject, logStore, accessKeyId, accessKeySecret,
        endpoint, shardOffsets, schema.fieldNames, fallback = fallback)
        .mapPartitions(it => {
          val encoderForDataColumns = RowEncoder(schema).resolveAndBind()
          it.map(t => transFunc(t, encoderForDataColumns))
        })
    }

    sqlContext.internalCreateDataFrame(rdd, schema, isStreaming = true)
  }

  override def stop(): Unit = {
    loghubOffsetReader.close()
  }

  override def toString: String = s"LoghubSource[$loghubOffsetReader]"
}

object LoghubSource {
  val VERSION = 1
}

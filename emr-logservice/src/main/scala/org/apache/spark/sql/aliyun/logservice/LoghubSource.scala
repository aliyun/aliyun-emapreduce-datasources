/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.spark.sql.aliyun.logservice

import java.io._
import java.nio.charset.StandardCharsets

import scala.collection.mutable.ArrayBuffer

import org.apache.commons.cli.MissingArgumentException
import org.apache.commons.io.IOUtils

import org.apache.spark.internal.Logging
import org.apache.spark.sql.{DataFrame, SQLContext}
import org.apache.spark.sql.execution.streaming.{HDFSMetadataLog, Offset, SerializedOffset, Source}
import org.apache.spark.sql.types.StructType

class LoghubSource(
    @transient sqlContext: SQLContext,
    override val schema: StructType,
    defaultSchema: Boolean,
    sourceOptions: Map[String, String],
    metadataPath: String,
    startingOffsets: LoghubOffsetRangeLimit,
    @transient loghubOffsetReader: LoghubOffsetReader)
  extends Source with Logging with Serializable {

  private val maxOffsetsPerTrigger =
    sourceOptions.getOrElse("maxOffsetsPerTrigger", 64 * 1024 + "").toLong
  private val accessKeyId = sourceOptions.getOrElse("access.key.id",
    throw new MissingArgumentException("Missing access key id (='access.key.id')."))
  private val accessKeySecret = sourceOptions.getOrElse("access.key.secret",
    throw new MissingArgumentException("Missing access key secret (='access.key.secret')."))
  private val endpoint = sourceOptions.getOrElse("endpoint",
    throw new MissingArgumentException("Missing log store endpoint (='endpoint')."))
  private val logProject = sourceOptions.getOrElse("sls.project",
    throw new MissingArgumentException("Missing logService project (='sls.project')."))
  private val logStore = sourceOptions.getOrElse("sls.store",
    throw new MissingArgumentException("Missing logService store (='sls.store')."))

  private lazy val initialPartitionOffsets = {
    val metadataLog =
      new HDFSMetadataLog[LoghubSourceOffset](sqlContext.sparkSession, metadataPath) {
        override def serialize(metadata: LoghubSourceOffset, out: OutputStream): Unit = {
          out.write(0) // A zero byte is written to support Spark 2.1.0 (SPARK-19517)
          val writer = new BufferedWriter(new OutputStreamWriter(out, StandardCharsets.UTF_8))
          writer.write("v" + LoghubSource.VERSION + "\n")
          writer.write(metadata.json())
          writer.flush()
        }

        override def deserialize(in: InputStream): LoghubSourceOffset = {
          in.read() // A zero byte is read to support Spark 2.1.0 (SPARK-19517)
          val content = IOUtils.toString(new InputStreamReader(in, StandardCharsets.UTF_8))
          // HDFSMetadataLog guarantees that it never creates a partial file.
          assert(content.length != 0)
          if (content(0) == 'v') {
            val indexOfNewLine = content.indexOf("\n")
            if (indexOfNewLine > 0) {
              LoghubSourceOffset(SerializedOffset(content.substring(indexOfNewLine + 1)))
            } else {
              throw new IllegalStateException(
                s"Log file was malformed: failed to detect the log file version line.")
            }
          } else {
            // The log was generated by Spark 2.1.0
            LoghubSourceOffset(SerializedOffset(content))
          }
        }
      }

    metadataLog.get(0).getOrElse {
      val offsets = startingOffsets match {
        case EarliestOffsetRangeLimit => LoghubSourceOffset(loghubOffsetReader.fetchEarliestOffsets())
        case LatestOffsetRangeLimit => LoghubSourceOffset(loghubOffsetReader.fetchLatestOffsets())
        case SpecificOffsetRangeLimit(partitionOffsets) => LoghubSourceOffset(partitionOffsets)
      }
      metadataLog.add(0, offsets)
      logInfo(s"Initial offsets: $offsets")
      offsets
    }.shardToOffsets
  }

  private var lastCursorTime: Int = initialPartitionOffsets.values.max

  override def getOffset: Option[Offset] = {
    // Make sure initialPartitionOffsets is initialized
    initialPartitionOffsets

    val latest = loghubOffsetReader.fetchLatestOffsets()
    val limitCursorTime = loghubOffsetReader.rateLimit(lastCursorTime, Some(maxOffsetsPerTrigger))
    val end = LoghubSourceOffset(latest.map(e => (e._1, limitCursorTime)))
    lastCursorTime = limitCursorTime
    Some(end)
  }

  override def getBatch(start: Option[Offset], end: Offset): DataFrame = {
    val fromShardOffsets = start match {
      case Some(prevBatchEndOffset) =>
        LoghubSourceOffset.getShardOffsets(prevBatchEndOffset)
      case None =>
        initialPartitionOffsets
    }
    val shardOffsets = new ArrayBuffer[(Int, Int, Int)]()
    val untilShardOffsets = LoghubSourceOffset.getShardOffsets(end)
    val (shards, newShards) = untilShardOffsets.keySet.partition { shard =>
      fromShardOffsets.contains(shard)
    }
    val earliest = if (newShards.nonEmpty) {
      loghubOffsetReader.fetchEarliestOffsets()
    } else {
      Map.empty[LoghubShard, Int]
    }
    shards.toSeq.foreach(shard => {
      shardOffsets.+=((shard.shard, fromShardOffsets(shard), untilShardOffsets(shard)))
    })
    newShards.toSeq.foreach(shard => {
      shardOffsets.+=((shard.shard, earliest(shard), untilShardOffsets(shard)))
    })
    val rdd = new LoghubSourceRDD(sqlContext.sparkContext, logProject, logStore, accessKeyId, accessKeySecret,
      endpoint, shardOffsets, schema.fieldNames, schema.toDDL, defaultSchema, sourceOptions)

    sqlContext.internalCreateDataFrame(rdd, schema, isStreaming = true)
  }

  override def stop(): Unit = {
    loghubOffsetReader.close()
  }

  override def toString: String = s"LoghubSource[$loghubOffsetReader]"
}

object LoghubSource {
  val VERSION = 1
}
